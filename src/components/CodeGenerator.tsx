import React, { useState } from 'react';

interface FormData {
  apiUrl: string;
  httpMethod: string;
  apiName: string;
  rapidApiHost: string;
  headers: string;
  rapidApiKey: string;
}

interface GeneratedCode {
  nodejs: string;
  env: string;
}

const CodeGenerator: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    apiUrl: '',
    httpMethod: 'GET',
    apiName: '',
    rapidApiHost: '',
    headers: '',
    rapidApiKey: ''
  });

  const [generatedCode, setGeneratedCode] = useState<GeneratedCode>({
    nodejs: '',
    env: ''
  });

  const [activeTab, setActiveTab] = useState<'nodejs' | 'env'>('nodejs');
  const [isGenerated, setIsGenerated] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  const extractHostFromUrl = (url: string): string => {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname;
    } catch {
      return 'api.rapidapi.com';
    }
  };

  const generateApiName = (url: string): string => {
    try {
      const urlObj = new URL(url);
      const pathParts = urlObj.pathname.split('/').filter(part => part.length > 0);
      if (pathParts.length > 0) {
        return pathParts[0].charAt(0).toUpperCase() + pathParts[0].slice(1) + 'API';
      }
      return urlObj.hostname.split('.')[0].charAt(0).toUpperCase() + 
             urlObj.hostname.split('.')[0].slice(1) + 'API';
    } catch {
      return 'API';
    }
  };

  const generateNodeJSCode = (data: FormData): string => {
    const apiName = (data.apiName && data.apiName.trim()) ? data.apiName.trim() : generateApiName(data.apiUrl);
    const host = (data.rapidApiHost && data.rapidApiHost.trim()) ? data.rapidApiHost.trim() : extractHostFromUrl(data.apiUrl);
    const additionalHeaders = data.headers ? JSON.parse(data.headers) : {};

    let headersCode = "'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,\n        'X-RapidAPI-Host': '" + host + "'";

    if (Object.keys(additionalHeaders).length > 0) {
      for (const [key, value] of Object.entries(additionalHeaders)) {
        headersCode += ",\n        '" + key + "': '" + value + "'";
      }
    }

    return `/**
 * ${apiName} API Client
 * Generated by Rapid API Generator
 * 
 * This script demonstrates secure API key management for ${apiName} API access.
 * Make sure to create a .env file with your API key before running this script.
 */

const axios = require('axios');
require('dotenv').config();

async function main() {
    // Get the API key from environment variables
    const apiKey = process.env.RAPIDAPI_KEY;
    
    if (!apiKey || apiKey === 'your_super_secret_api_key') {
        console.error('Error: Please set a valid RAPIDAPI_KEY in your .env file');
        console.error('Copy .env.example to .env and replace with your actual API key');
        return;
    }
    
    // API endpoint configuration
    const url = '${data.apiUrl}';
    
    const headers = {
        ${headersCode}
    };
    
    try {
        console.log('Making API request...');
        const response = await axios.${data.httpMethod.toLowerCase()}(url, { headers });
        
        console.log('Success! API Response:');
        console.log(response.data);
        
    } catch (error) {
        if (error.response) {
            console.error(\`API request failed with status code: \${error.response.status}\`);
            console.error(\`Response: \${error.response.data}\`);
        } else if (error.request) {
            console.error('No response received from API');
            console.error(error.message);
        } else {
            console.error('Error setting up API request:', error.message);
        }
    }
}

// Run the main function
main().catch(console.error);`;
  };

  const generateEnvCode = (): string => {
    return `# RapidAPI Configuration
# Copy this file to .env and replace with your actual API key
# Get your API key from: https://rapidapi.com/

RAPIDAPI_KEY=your_super_secret_api_key

# Additional environment variables can be added here
# NODE_ENV=development
# API_TIMEOUT=5000`;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = (): boolean => {
    setErrorMessage('');

    // Validate URL
    try {
      new URL(formData.apiUrl);
    } catch {
      setErrorMessage('Please enter a valid API URL');
      return false;
    }

    // Validate JSON headers if provided
    if (formData.headers.trim()) {
      try {
        JSON.parse(formData.headers);
      } catch {
        setErrorMessage('Headers must be valid JSON format');
        return false;
      }
    }

    return true;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      const nodejs = generateNodeJSCode(formData);
      const env = generateEnvCode();
      
      setGeneratedCode({ nodejs, env });
      setIsGenerated(true);
      setSuccessMessage('Code generated successfully!');
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (error) {
      setErrorMessage('Failed to generate code. Please check your inputs.');
    }
  };

  const copyToClipboard = async () => {
    try {
      const textToCopy = activeTab === 'nodejs' ? generatedCode.nodejs : generatedCode.env;
      await navigator.clipboard.writeText(textToCopy);
      setSuccessMessage('Code copied to clipboard!');
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch {
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      const textToCopy = activeTab === 'nodejs' ? generatedCode.nodejs : generatedCode.env;
      textArea.value = textToCopy;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setSuccessMessage('Code copied to clipboard!');
      setTimeout(() => setSuccessMessage(''), 3000);
    }
  };

  const downloadCode = () => {
    const content = activeTab === 'nodejs' ? generatedCode.nodejs : generatedCode.env;
    const filename = activeTab === 'nodejs' ? 'rapidapi_client.js' : '.env.example';
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    setSuccessMessage(filename + ' downloaded successfully!');
    setTimeout(() => setSuccessMessage(''), 3000);
  };

  return (
    <div style={{
      fontFamily: 'Arial, sans-serif',
      margin: 0,
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: '#333',
      minHeight: '100vh',
      padding: '20px'
    }}>
      <div style={{
        maxWidth: '900px',
        margin: '0 auto',
        backgroundColor: 'rgba(255, 255, 255, 0.95)',
        padding: '30px',
        borderRadius: '12px',
        boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
        backdropFilter: 'blur(10px)'
      }}>
        <h1 style={{
          color: '#0366d6',
          textAlign: 'center',
          marginBottom: '10px'
        }}>
          Rapid API Generator
        </h1>
        
        <p style={{
          textAlign: 'center',
          color: '#666',
          marginBottom: '30px'
        }}>
          Generate secure and ready-to-use API client code instantly
        </p>

        {/* Messages */}
        {successMessage && (
          <div style={{
            padding: '12px',
            marginBottom: '20px',
            backgroundColor: '#d4edda',
            color: '#155724',
            border: '1px solid #c3e6cb',
            borderRadius: '6px'
          }}>
            {successMessage}
          </div>
        )}

        {errorMessage && (
          <div style={{
            padding: '12px',
            marginBottom: '20px',
            backgroundColor: '#f8d7da',
            color: '#721c24',
            border: '1px solid #f5c6cb',
            borderRadius: '6px'
          }}>
            {errorMessage}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '30px' }}>
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '5px',
                fontWeight: 'bold',
                color: '#444'
              }}>
                API Endpoint URL
              </label>
              <input
                type="url"
                name="apiUrl"
                value={formData.apiUrl}
                onChange={handleInputChange}
                placeholder="https://api.example.com/v1/endpoint"
                required
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '2px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box'
                }}
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '5px',
                fontWeight: 'bold',
                color: '#444'
              }}>
                HTTP Method
              </label>
              <select
                name="httpMethod"
                value={formData.httpMethod}
                onChange={handleInputChange}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '2px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box'
                }}
              >
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
                <option value="PATCH">PATCH</option>
              </select>
            </div>

            <div style={{ display: 'flex', gap: '15px', marginBottom: '20px' }}>
              <div style={{ flex: 1 }}>
                <label style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontWeight: 'bold',
                  color: '#444'
                }}>
                  API Name
                </label>
                <input
                  type="text"
                  name="apiName"
                  value={formData.apiName}
                  onChange={handleInputChange}
                  placeholder="MyAPI"
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '2px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                />
              </div>

              <div style={{ flex: 1 }}>
                <label style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontWeight: 'bold',
                  color: '#444'
                }}>
                  RapidAPI Host (optional)
                </label>
                <input
                  type="text"
                  name="rapidApiHost"
                  value={formData.rapidApiHost}
                  onChange={handleInputChange}
                  placeholder="api.rapidapi.com"
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '2px solid #ddd',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                />
              </div>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '5px',
                fontWeight: 'bold',
                color: '#444'
              }}>
                Additional Headers (JSON format, optional)
              </label>
              <textarea
                name="headers"
                value={formData.headers}
                onChange={handleInputChange}
                placeholder='{"Authorization": "Bearer token", "Custom-Header": "value"}'
                rows={3}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '2px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box',
                  fontFamily: 'monospace'
                }}
              />
            </div>

            <button
              type="submit"
              style={{
                background: 'linear-gradient(45deg, #0366d6, #0366d6)',
                color: 'white',
                border: 'none',
                padding: '15px 30px',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: 'bold',
                width: '100%',
                transition: 'all 0.3s ease'
              }}
            >
              Generate API Code
            </button>
          </div>
        </form>

        {/* Generated Code Output */}
        {isGenerated && (
          <div style={{ marginTop: '40px' }}>
            <h2 style={{
              color: '#0366d6',
              marginBottom: '20px',
              textAlign: 'center'
            }}>
              Generated Code
            </h2>

            {/* Tabs */}
            <div style={{
              display: 'flex',
              borderBottom: '2px solid #ddd',
              marginBottom: '20px'
            }}>
              <button
                onClick={() => setActiveTab('nodejs')}
                style={{
                  background: activeTab === 'nodejs' ? '#0366d6' : 'transparent',
                  color: activeTab === 'nodejs' ? 'white' : '#0366d6',
                  border: 'none',
                  padding: '12px 24px',
                  cursor: 'pointer',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  borderRadius: '6px 6px 0 0',
                  marginRight: '5px'
                }}
              >
                Node.js / Axios
              </button>
              <button
                onClick={() => setActiveTab('env')}
                style={{
                  background: activeTab === 'env' ? '#0366d6' : 'transparent',
                  color: activeTab === 'env' ? 'white' : '#0366d6',
                  border: 'none',
                  padding: '12px 24px',
                  cursor: 'pointer',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  borderRadius: '6px 6px 0 0'
                }}
              >
                .env Template
              </button>
            </div>

            {/* Code Content */}
            <div style={{ position: 'relative' }}>
              <div style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                display: 'flex',
                gap: '10px',
                zIndex: 10
              }}>
                <button
                  onClick={copyToClipboard}
                  style={{
                    background: '#28a745',
                    color: 'white',
                    border: 'none',
                    padding: '8px 16px',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  Copy
                </button>
                <button
                  onClick={downloadCode}
                  style={{
                    background: '#17a2b8',
                    color: 'white',
                    border: 'none',
                    padding: '8px 16px',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  Download
                </button>
              </div>

              <pre style={{
                backgroundColor: '#f8f9fa',
                border: '1px solid #ddd',
                borderRadius: '6px',
                padding: '20px',
                fontSize: '14px',
                overflow: 'auto',
                maxHeight: '500px',
                fontFamily: 'Consolas, Monaco, "Courier New", monospace',
                lineHeight: '1.5',
                whiteSpace: 'pre-wrap'
              }}>
                {activeTab === 'nodejs' ? generatedCode.nodejs : generatedCode.env}
              </pre>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CodeGenerator;