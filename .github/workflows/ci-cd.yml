name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Run tests
      run: npm test
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Package extension
      run: npm run package
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v3
      with:
        name: rapidapi-generator-vsix
        path: '*.vsix'

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Package extension
      run: npm run package
    
    - name: Get tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this release
          
          - Auto-generated release from tag ${{ github.ref }}
          
          ## Installation
          
          ### VS Code Extension
          Download the `.vsix` file from the assets below and install using:
          ```bash
          code --install-extension rapidapi-generator-${{ steps.get_version.outputs.VERSION }}.vsix
          ```
          
          ### NPX Quick Install
          ```bash
          npx create-rapidapi-extension
          ```
          
          See the [README](https://github.com/jcotebcs/Rapid_API-Generator#readme) for full documentation.
        draft: false
        prerelease: false
    
    - name: Upload VSIX to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./rapidapi-generator-${{ steps.get_version.outputs.VERSION }}.vsix
        asset_name: rapidapi-generator-${{ steps.get_version.outputs.VERSION }}.vsix
        asset_content_type: application/zip
    
    # Publish to VS Code Marketplace (requires VSCE_TOKEN secret)
    - name: Publish to VS Code Marketplace
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
      run: |
        if [ -n "$VSCE_TOKEN" ]; then
          npx vsce publish --pat $VSCE_TOKEN
        else
          echo "VSCE_TOKEN not set, skipping marketplace publication"
        fi
    
    # Publish NPX installer to npm (requires NPM_TOKEN secret)
    - name: Build and publish NPX installer
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        if [ -n "$NODE_AUTH_TOKEN" ]; then
          cd npx-installer
          npm publish
        else
          echo "NPM_TOKEN not set, skipping NPM publication"
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'